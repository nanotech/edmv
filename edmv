#!/usr/bin/env ruby

require 'tempfile'
require 'fileutils'

files = ARGV
t = Tempfile.new('edmv')

abort "usage: edmv files" if files.empty?

begin
    tmpdir = nil
    t.write(files.join("\n") + "\n")
    t.flush
    abort "editor failed: #$?" unless system ENV['EDITOR'], t.path

    # The editor might do an atomic rename-save, breaking our fd ref.
    f = File.open(t.path) 
    t.unlink

    new_names = f.read.split("\n")
    abort "file count doesn't match" if files.length != new_names.length
    abort "duplicate target names" if new_names.uniq != new_names

    # Move to a new directory first to prevent collisions between the
    # old set and new set of filenames.
    tmpdir = File.basename(f.path) + "-mvdir"

    map = files.zip(new_names).find_all { |a,b| a != b }
    unless map.empty?
        map.map do |from,to|
            temp_to = File.join(tmpdir, to)
            puts "#{from} -> #{to}"
            FileUtils.mkdir_p File.dirname(temp_to)
            FileUtils.mv from, temp_to
            [temp_to, to]
        end.each do |temp_to, to|
            # Perform a separate iteration to prevent
            # overlaping filenames in the source and target
            # set from clobbering each other.
            if File.exist? to
                abort "target file already exists: #{to.inspect}"
            else
                FileUtils.mv temp_to, to
                Dir.rmdir File.dirname(temp_to) rescue Errno::ENOTEMPTY
            end
        end
    end
ensure
    t.close
end
